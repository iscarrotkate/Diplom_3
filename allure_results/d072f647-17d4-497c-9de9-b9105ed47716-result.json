{"name": "Закрытие модального окна с детальной информацией об ингредиенте по кнопке Х", "status": "broken", "statusDetails": {"message": "Exception: Не удалось определить видимость элемента", "trace": "self = <pages.home_page.HomePage object at 0x00000282B02D9B80>\nelement = <selenium.webdriver.remote.webelement.WebElement (session=\"0118c42e-3718-4c4a-bce9-b716b310e3a8\", element=\"df3fca8d-9899-4a83-a28d-e7087c731e88\")>\n\n    @allure.step('Кликнуть по элементу')\n    def click_on_element(self, element):\n        try:\n            WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of(element))\n>           element.click()\n\npages\\base_page.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Carrot\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Carrot\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Carrot\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000282B0266B30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <a class=\\\\\"BurgerIngredien...ef=\\\\\"/ingredient/61c0c5a71d1f82001bdaaa6f\\\\\">\",\"overlayingElement\":\"<div class=\\\\\"Modal_modal_overlay__x2ZCr\\\\\">\"}}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <a class=\"BurgerIngredient_ingredient__1TVf6 ml-4 mr-4 mb-8\" href=\"/ingredient/61c0c5a71d1f82001bdaaa6f\"> is not clickable at point (164,725) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:351:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:354:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:230:31\n\nC:\\Users\\Carrot\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_orders.TestOrders object at 0x00000282B010A6C0>, home_page = <pages.home_page.HomePage object at 0x00000282B02D9B80>\ningredient_details_popup = <pages.ingredient_details_popup.IngredientDetails object at 0x00000282B018E9E0>\n\n    @allure.title('Закрытие модального окна с детальной информацией об ингредиенте по кнопке Х')\n    @allure.description('Тест проверяет, что при клике на кнопку Х закрывается модальное окно с его описанием')\n    def test_close_ingredient_details_popup(self, home_page, ingredient_details_popup):\n        home_page.open_page_by_direct_url()\n    \n        ingredient = home_page.select_topping()\n    \n>       home_page.click_on_element(ingredient)\n\ntests\\test_orders.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.home_page.HomePage object at 0x00000282B02D9B80>\nelement = <selenium.webdriver.remote.webelement.WebElement (session=\"0118c42e-3718-4c4a-bce9-b716b310e3a8\", element=\"df3fca8d-9899-4a83-a28d-e7087c731e88\")>\n\n    @allure.step('Кликнуть по элементу')\n    def click_on_element(self, element):\n        try:\n            WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of(element))\n            element.click()\n        except Exception:\n>           raise Exception(f\"Не удалось определить видимость элемента\")\nE           Exception: Не удалось определить видимость элемента\n\npages\\base_page.py:147: Exception"}, "description": "Тест проверяет, что при клике на кнопку Х закрывается модальное окно с его описанием", "steps": [{"name": "Открыть главную страницу", "status": "passed", "steps": [{"name": "Открыть страницу по прямому URL", "status": "passed", "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/'"}], "start": 1747472605641, "stop": 1747472606593}], "start": 1747472605641, "stop": 1747472606593}, {"name": "Выбрать начинку", "status": "passed", "steps": [{"name": "Выбрать ингредиент", "status": "passed", "steps": [{"name": "Получить элемент по xpath", "status": "passed", "parameters": [{"name": "xpath", "value": "'//h2[text()='Начинки']/following-sibling::ul[1]'"}], "start": 1747472606593, "stop": 1747472606620}, {"name": "Получить дочерние элементы по xpath", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"0118c42e-3718-4c4a-bce9-b716b310e3a8\", element=\"449ac1a2-4614-4fc1-a34b-0691a21ab3af\")>"}, {"name": "xpath", "value": "'.//a[contains(@class, 'BurgerIngredient_ingredient')]'"}], "start": 1747472606620, "stop": 1747472606652}], "parameters": [{"name": "section", "value": "'//h2[text()='Начинки']/following-sibling::ul[1]'"}, {"name": "index", "value": "0"}], "start": 1747472606593, "stop": 1747472606652}], "parameters": [{"name": "index", "value": "0"}], "start": 1747472606593, "stop": 1747472606652}, {"name": "Кликнуть по элементу", "status": "broken", "statusDetails": {"message": "Exception: Не удалось определить видимость элемента\n", "trace": "  File \"C:\\Users\\Carrot\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"D:\\PyProjects\\PythonProject\\diploma\\diploma-ekb\\pages\\base_page.py\", line 147, in click_on_element\n    raise Exception(f\"Не удалось определить видимость элемента\")\n"}, "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"0118c42e-3718-4c4a-bce9-b716b310e3a8\", element=\"df3fca8d-9899-4a83-a28d-e7087c731e88\")>"}], "start": 1747472606652, "stop": 1747472606691}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1747472605640, "stop": 1747472606692, "uuid": "42c22869-d5a3-4d73-a89c-9c4a3874c733", "historyId": "64b4d5145e6deaedb2ebdcb0eab0501f", "testCaseId": "b6a8797d4173e4876c54ce4e98cc9b2d", "fullName": "tests.test_orders.TestOrders#test_close_ingredient_details_popup", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrders"}, {"name": "host", "value": "DESKTOP-BEEKPER"}, {"name": "thread", "value": "12168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}